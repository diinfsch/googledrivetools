import common
import json
import os
import argparse
import glob
from pathlib import Path

class fileItem: 
    id: any
    name: any
    properties: any


def findFiles(service,source_folder_id,property):
    results = service.files().list(q=f"'{source_folder_id}' in parents",
                                    fields='files(id, name, mimeType, webContentLink,properties)').execute()
    items = results.get('files', [])
    files=[]
    for item in items:
        i = fileItem()

        i.id = item['id']
        i.name= item['name']
        mimeType = item['mimeType']

        if 'properties' in item:
             i.properties = item['properties']
        else: 
             i.properties={}

        if  mimeType == common.mimeType:
            newFiles=findFiles(service,i.id,property)
            for i in newFiles:
                files.append(i)
        else: 
            if mimeType != "application/json" and not (i.properties!={} and property in i.properties and  i.properties[property] == "true"):
             files.append(i)

    return files

def storeProperties(service,source_folder_id,folder,property):
   
    items=findFiles(service,source_folder_id,property)

    for item in items: 
        file_name= Path(item.name).stem +".json"
        f = open(folder+"/"+file_name, "w")
        json_object = json.dumps(item.properties, indent=4)
        f.write(json_object)
        f.close()

if __name__ == "__main__":
    print("Start Get Properties")
    parser = argparse.ArgumentParser()
    parser.add_argument("-cF", "--configFolder", help="Config Folder",default="./config")
    parser.add_argument("-dF", "--descriptorFolder", help="Folder where are the descriptors of a file",default=".")
    parser.add_argument("-eP", "--excludeProperty", help="Defines an property to exclude",default="autogenerated")
    common.addArgs(parser)
    args = parser.parse_args()

    service = common.configGoogleDrive(args)

    with open(os.path.join(args.configFolder,'googledrive.json')) as f:
        d = json.load(f)
        if "sourceFolder" not in d: 
            raise "No source folder given"
        else :
            source_folder_id = d["sourceFolder"]
        storeProperties(service,source_folder_id,args.descriptorFolder, args.excludeProperty)